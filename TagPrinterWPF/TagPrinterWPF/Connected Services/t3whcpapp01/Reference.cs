//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//
//     變更此檔案可能會導致不正確的行為，而且若已重新產生
//     程式碼，則會遺失變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace t3whcpapp01
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://amkor.com/att_hrm", ConfigurationName="t3whcpapp01.HRMWebServiceSoap")]
    public interface HRMWebServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HRMEmployees2Dataset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        t3whcpapp01.ArrayOfXElement HRMEmployees2Dataset(string strFilterBy, string strOrderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HRMEmployees2Dataset", ReplyAction="*")]
        System.Threading.Tasks.Task<t3whcpapp01.ArrayOfXElement> HRMEmployees2DatasetAsync(string strFilterBy, string strOrderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HRMEmployees2Json", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HRMEmployees2Json(string strFilterBy, string strOrderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HRMEmployees2Json", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HRMEmployees2JsonAsync(string strFilterBy, string strOrderBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HCPDBSQLQuery2Dataset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        t3whcpapp01.ArrayOfXElement HCPDBSQLQuery2Dataset(string sCaller, string sSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HCPDBSQLQuery2Dataset", ReplyAction="*")]
        System.Threading.Tasks.Task<t3whcpapp01.ArrayOfXElement> HCPDBSQLQuery2DatasetAsync(string sCaller, string sSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HCPDBSQLQuery2Json", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HCPDBSQLQuery2Json(string sCaller, string sSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HCPDBSQLQuery2Json", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HCPDBSQLQuery2JsonAsync(string sCaller, string sSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HCPDBSQLUpdate_SingleSQL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void HCPDBSQLUpdate_SingleSQL(string sCaller, string sSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HCPDBSQLUpdate_SingleSQL", ReplyAction="*")]
        System.Threading.Tasks.Task HCPDBSQLUpdate_SingleSQLAsync(string sCaller, string sSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HCPDBSQLUpdate_MultipleSQL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void HCPDBSQLUpdate_MultipleSQL(string sCaller, string sSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/HCPDBSQLUpdate_MultipleSQL", ReplyAction="*")]
        System.Threading.Tasks.Task HCPDBSQLUpdate_MultipleSQLAsync(string sCaller, string sSQL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/SendEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SendEmail(string sCaller, string sSendFrom, string sSendTo, string sSendCC, string sSendBCC, string sSendSubject, string sSendBody, bool isSendBodyHtml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/SendEmail", ReplyAction="*")]
        System.Threading.Tasks.Task SendEmailAsync(string sCaller, string sSendFrom, string sSendTo, string sSendCC, string sSendBCC, string sSendSubject, string sSendBody, bool isSendBodyHtml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/InsertEmpTempData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string InsertEmpTempData(string strJson);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://amkor.com/att_hrm/InsertEmpTempData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> InsertEmpTempDataAsync(string strJson);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface HRMWebServiceSoapChannel : t3whcpapp01.HRMWebServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class HRMWebServiceSoapClient : System.ServiceModel.ClientBase<t3whcpapp01.HRMWebServiceSoap>, t3whcpapp01.HRMWebServiceSoap
    {
        
        /// <summary>
        /// 實作此部分方法來設定服務端點。
        /// </summary>
        /// <param name="serviceEndpoint">要設定的端點</param>
        /// <param name="clientCredentials">用戶端認證</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public HRMWebServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(HRMWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), HRMWebServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HRMWebServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(HRMWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HRMWebServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(HRMWebServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public HRMWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public t3whcpapp01.ArrayOfXElement HRMEmployees2Dataset(string strFilterBy, string strOrderBy)
        {
            return base.Channel.HRMEmployees2Dataset(strFilterBy, strOrderBy);
        }
        
        public System.Threading.Tasks.Task<t3whcpapp01.ArrayOfXElement> HRMEmployees2DatasetAsync(string strFilterBy, string strOrderBy)
        {
            return base.Channel.HRMEmployees2DatasetAsync(strFilterBy, strOrderBy);
        }
        
        public string HRMEmployees2Json(string strFilterBy, string strOrderBy)
        {
            return base.Channel.HRMEmployees2Json(strFilterBy, strOrderBy);
        }
        
        public System.Threading.Tasks.Task<string> HRMEmployees2JsonAsync(string strFilterBy, string strOrderBy)
        {
            return base.Channel.HRMEmployees2JsonAsync(strFilterBy, strOrderBy);
        }
        
        public t3whcpapp01.ArrayOfXElement HCPDBSQLQuery2Dataset(string sCaller, string sSQL)
        {
            return base.Channel.HCPDBSQLQuery2Dataset(sCaller, sSQL);
        }
        
        public System.Threading.Tasks.Task<t3whcpapp01.ArrayOfXElement> HCPDBSQLQuery2DatasetAsync(string sCaller, string sSQL)
        {
            return base.Channel.HCPDBSQLQuery2DatasetAsync(sCaller, sSQL);
        }
        
        public string HCPDBSQLQuery2Json(string sCaller, string sSQL)
        {
            return base.Channel.HCPDBSQLQuery2Json(sCaller, sSQL);
        }
        
        public System.Threading.Tasks.Task<string> HCPDBSQLQuery2JsonAsync(string sCaller, string sSQL)
        {
            return base.Channel.HCPDBSQLQuery2JsonAsync(sCaller, sSQL);
        }
        
        public void HCPDBSQLUpdate_SingleSQL(string sCaller, string sSQL)
        {
            base.Channel.HCPDBSQLUpdate_SingleSQL(sCaller, sSQL);
        }
        
        public System.Threading.Tasks.Task HCPDBSQLUpdate_SingleSQLAsync(string sCaller, string sSQL)
        {
            return base.Channel.HCPDBSQLUpdate_SingleSQLAsync(sCaller, sSQL);
        }
        
        public void HCPDBSQLUpdate_MultipleSQL(string sCaller, string sSQL)
        {
            base.Channel.HCPDBSQLUpdate_MultipleSQL(sCaller, sSQL);
        }
        
        public System.Threading.Tasks.Task HCPDBSQLUpdate_MultipleSQLAsync(string sCaller, string sSQL)
        {
            return base.Channel.HCPDBSQLUpdate_MultipleSQLAsync(sCaller, sSQL);
        }
        
        public void SendEmail(string sCaller, string sSendFrom, string sSendTo, string sSendCC, string sSendBCC, string sSendSubject, string sSendBody, bool isSendBodyHtml)
        {
            base.Channel.SendEmail(sCaller, sSendFrom, sSendTo, sSendCC, sSendBCC, sSendSubject, sSendBody, isSendBodyHtml);
        }
        
        public System.Threading.Tasks.Task SendEmailAsync(string sCaller, string sSendFrom, string sSendTo, string sSendCC, string sSendBCC, string sSendSubject, string sSendBody, bool isSendBodyHtml)
        {
            return base.Channel.SendEmailAsync(sCaller, sSendFrom, sSendTo, sSendCC, sSendBCC, sSendSubject, sSendBody, isSendBodyHtml);
        }
        
        public string InsertEmpTempData(string strJson)
        {
            return base.Channel.InsertEmpTempData(strJson);
        }
        
        public System.Threading.Tasks.Task<string> InsertEmpTempDataAsync(string strJson)
        {
            return base.Channel.InsertEmpTempDataAsync(strJson);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.HRMWebServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.HRMWebServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.HRMWebServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://t3whcpapp01:8083/HRMWebService.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.HRMWebServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://t3whcpapp01:8083/HRMWebService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            HRMWebServiceSoap,
            
            HRMWebServiceSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.2.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
