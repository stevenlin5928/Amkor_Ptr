//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//
//     變更此檔案可能會導致不正確的行為，而且若已重新產生
//     程式碼，則會遺失變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace AmkorServices1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AmkorServices1.AMSServiceForVendorSoap")]
    public interface AMSServiceForVendorSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_CheckHrCertificated", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AMS_CheckHrCertificated(string sEmpId, string sOperation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_CheckHrCertificated", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AMS_CheckHrCertificatedAsync(string sEmpId, string sOperation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetWaferListByRC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AmkorServices1.ArrayOfXElement GetWaferListByRC(string sRC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetWaferListByRC", ReplyAction="*")]
        System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> GetWaferListByRCAsync(string sRC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetWaferListByMotherRC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AmkorServices1.ArrayOfXElement GetWaferListByMotherRC(string sRC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetWaferListByMotherRC", ReplyAction="*")]
        System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> GetWaferListByMotherRCAsync(string sRC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LinkCassateAndRC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LinkCassateAndRC(string sCassette, string sRC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LinkCassateAndRC", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LinkCassateAndRCAsync(string sCassette, string sRC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DPS_AutoMoveInOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string DPS_AutoMoveInOut(string sRC, string sMC, string sEmpId, string sAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/DPS_AutoMoveInOut", ReplyAction="*")]
        System.Threading.Tasks.Task<string> DPS_AutoMoveInOutAsync(string sRC, string sMC, string sEmpId, string sAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetWTRecipe", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetWTRecipe(string sRC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetWTRecipe", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetWTRecipeAsync(string sRC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetATK_QMALotInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AmkorServices1.ArrayOfXElement GetATK_QMALotInfo(string sLot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetATK_QMALotInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> GetATK_QMALotInfoAsync(string sLot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotHold_API_ByAMSLotIdwithUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AmkorServices1.LotHold_API_ByAMSLotIdwithUserResponse LotHold_API_ByAMSLotIdwithUser(AmkorServices1.LotHold_API_ByAMSLotIdwithUserRequest request);
        
        // CODEGEN: 因為此作業具有多個傳回值，所以正在產生訊息合約。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotHold_API_ByAMSLotIdwithUser", ReplyAction="*")]
        System.Threading.Tasks.Task<AmkorServices1.LotHold_API_ByAMSLotIdwithUserResponse> LotHold_API_ByAMSLotIdwithUserAsync(AmkorServices1.LotHold_API_ByAMSLotIdwithUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotHold_API_ByAMSLotIdwithUser_DLP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPResponse LotHold_API_ByAMSLotIdwithUser_DLP(AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPRequest request);
        
        // CODEGEN: 因為此作業具有多個傳回值，所以正在產生訊息合約。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/LotHold_API_ByAMSLotIdwithUser_DLP", ReplyAction="*")]
        System.Threading.Tasks.Task<AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPResponse> LotHold_API_ByAMSLotIdwithUser_DLPAsync(AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_UpdMRSStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AMS_UpdMRSStatus(string sReqNoList, string sStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_UpdMRSStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AMS_UpdMRSStatusAsync(string sReqNoList, string sStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_QueryMRSInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AmkorServices1.ArrayOfXElement AMS_QueryMRSInfo(string sProdLine, string sFloor, string sStock, string sReqNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_QueryMRSInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> AMS_QueryMRSInfoAsync(string sProdLine, string sFloor, string sStock, string sReqNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_QueryStockSIDInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AmkorServices1.ArrayOfXElement AMS_QueryStockSIDInfo(string sProdLine, string sFloor, string sStock, string sMaterialGroup, string sSID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_QueryStockSIDInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> AMS_QueryStockSIDInfoAsync(string sProdLine, string sFloor, string sStock, string sMaterialGroup, string sSID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_Stocktest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object AMS_Stocktest(string action, string SidList, string sLotPrefix, string sFloor, string sEmpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_Stocktest", ReplyAction="*")]
        System.Threading.Tasks.Task<object> AMS_StocktestAsync(string action, string SidList, string sLotPrefix, string sFloor, string sEmpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_StockIn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object AMS_StockIn(object[] aDatalist, string sEmpId, string sAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_StockIn", ReplyAction="*")]
        System.Threading.Tasks.Task<object> AMS_StockInAsync(object[] aDatalist, string sEmpId, string sAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_StockOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object AMS_StockOut(object[] aDatalist, string sProdLine, string sFloor, string sEmpId, string sAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_StockOut", ReplyAction="*")]
        System.Threading.Tasks.Task<object> AMS_StockOutAsync(object[] aDatalist, string sProdLine, string sFloor, string sEmpId, string sAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_UpdSIDStocktaking", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        object AMS_UpdSIDStocktaking(string sProdLine, string sFloor, object[] aDatalist, string sEmpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_UpdSIDStocktaking", ReplyAction="*")]
        System.Threading.Tasks.Task<object> AMS_UpdSIDStocktakingAsync(string sProdLine, string sFloor, object[] aDatalist, string sEmpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_QuerySIDOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AmkorServices1.ArrayOfXElement AMS_QuerySIDOrder(string sAction, string sOrderId, string sStatus, string sMC, string sFloor, string sLotprefix, string sSID, string sEPC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_QuerySIDOrder", ReplyAction="*")]
        System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> AMS_QuerySIDOrderAsync(string sAction, string sOrderId, string sStatus, string sMC, string sFloor, string sLotprefix, string sSID, string sEPC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_UpdSIDOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AMS_UpdSIDOrder(string sOrderID, string sStatus, string sMC, string sFloor, string sLot, string sEmpId, string sSID, string sMTGroup, string sQty, string sReason, string sVendorLot, string sEPC, string sExpDate, string sFunction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_UpdSIDOrder", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AMS_UpdSIDOrderAsync(string sOrderID, string sStatus, string sMC, string sFloor, string sLot, string sEmpId, string sSID, string sMTGroup, string sQty, string sReason, string sVendorLot, string sEPC, string sExpDate, string sFunction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_isMaterialOP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AMS_isMaterialOP(string sOPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_isMaterialOP", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AMS_isMaterialOPAsync(string sOPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_GetLotInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AmkorServices1.ArrayOfXElement AMS_GetLotInfo(string sRC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_GetLotInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> AMS_GetLotInfoAsync(string sRC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_CheckOpCertificated", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AMS_CheckOpCertificated(string sRC, string sEmpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_CheckOpCertificated", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AMS_CheckOpCertificatedAsync(string sRC, string sEmpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QueryStockoutHis", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        AmkorServices1.ArrayOfXElement QueryStockoutHis(string sSID, string sVendorLot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QueryStockoutHis", ReplyAction="*")]
        System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> QueryStockoutHisAsync(string sSID, string sVendorLot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOperSIDByOper", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetOperSIDByOper(string sRC, string sOpName, string sRemark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetOperSIDByOper", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOperSIDByOperAsync(string sRC, string sOpName, string sRemark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_ManualStockInReason", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AMS_ManualStockInReason();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_ManualStockInReason", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AMS_ManualStockInReasonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_ManualStockOutReason", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AMS_ManualStockOutReason();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_ManualStockOutReason", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AMS_ManualStockOutReasonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_StockOut1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AMS_StockOut1(string sRC, string sMC, string sSID, string sVendorLot, string sRemark, string sQty, string sFloor, string sEmpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_StockOut1", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AMS_StockOut1Async(string sRC, string sMC, string sSID, string sVendorLot, string sRemark, string sQty, string sFloor, string sEmpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_StockIn1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AMS_StockIn1(string sProdLine, string sFloor, string sStock, string sSID, string sVendorLot, string sQty, string sRemark, string sEmpId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/AMS_StockIn1", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AMS_StockIn1Async(string sProdLine, string sFloor, string sStock, string sSID, string sVendorLot, string sQty, string sRemark, string sEmpId);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LotHold_API_ByAMSLotIdwithUser", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LotHold_API_ByAMSLotIdwithUserRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string sAMSLotId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string sMsg;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string sHoldComments;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string sHoldReason;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string sFromSYS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string sUserName;
        
        public LotHold_API_ByAMSLotIdwithUserRequest()
        {
        }
        
        public LotHold_API_ByAMSLotIdwithUserRequest(string sAMSLotId, string sMsg, string sHoldComments, string sHoldReason, string sFromSYS, string sUserName)
        {
            this.sAMSLotId = sAMSLotId;
            this.sMsg = sMsg;
            this.sHoldComments = sHoldComments;
            this.sHoldReason = sHoldReason;
            this.sFromSYS = sFromSYS;
            this.sUserName = sUserName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LotHold_API_ByAMSLotIdwithUserResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LotHold_API_ByAMSLotIdwithUserResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool LotHold_API_ByAMSLotIdwithUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string sMsg;
        
        public LotHold_API_ByAMSLotIdwithUserResponse()
        {
        }
        
        public LotHold_API_ByAMSLotIdwithUserResponse(bool LotHold_API_ByAMSLotIdwithUserResult, string sMsg)
        {
            this.LotHold_API_ByAMSLotIdwithUserResult = LotHold_API_ByAMSLotIdwithUserResult;
            this.sMsg = sMsg;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LotHold_API_ByAMSLotIdwithUser_DLP", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LotHold_API_ByAMSLotIdwithUser_DLPRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string sAMSLotId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string sMsg;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string sHoldComments;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string sHoldReason;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string sFromSYS;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public string sUserName;
        
        public LotHold_API_ByAMSLotIdwithUser_DLPRequest()
        {
        }
        
        public LotHold_API_ByAMSLotIdwithUser_DLPRequest(string sAMSLotId, string sMsg, string sHoldComments, string sHoldReason, string sFromSYS, string sUserName)
        {
            this.sAMSLotId = sAMSLotId;
            this.sMsg = sMsg;
            this.sHoldComments = sHoldComments;
            this.sHoldReason = sHoldReason;
            this.sFromSYS = sFromSYS;
            this.sUserName = sUserName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LotHold_API_ByAMSLotIdwithUser_DLPResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LotHold_API_ByAMSLotIdwithUser_DLPResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool LotHold_API_ByAMSLotIdwithUser_DLPResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string sMsg;
        
        public LotHold_API_ByAMSLotIdwithUser_DLPResponse()
        {
        }
        
        public LotHold_API_ByAMSLotIdwithUser_DLPResponse(bool LotHold_API_ByAMSLotIdwithUser_DLPResult, string sMsg)
        {
            this.LotHold_API_ByAMSLotIdwithUser_DLPResult = LotHold_API_ByAMSLotIdwithUser_DLPResult;
            this.sMsg = sMsg;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface AMSServiceForVendorSoapChannel : AmkorServices1.AMSServiceForVendorSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class AMSServiceForVendorSoapClient : System.ServiceModel.ClientBase<AmkorServices1.AMSServiceForVendorSoap>, AmkorServices1.AMSServiceForVendorSoap
    {
        
        /// <summary>
        /// 實作此部分方法來設定服務端點。
        /// </summary>
        /// <param name="serviceEndpoint">要設定的端點</param>
        /// <param name="clientCredentials">用戶端認證</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AMSServiceForVendorSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(AMSServiceForVendorSoapClient.GetBindingForEndpoint(endpointConfiguration), AMSServiceForVendorSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AMSServiceForVendorSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AMSServiceForVendorSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AMSServiceForVendorSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AMSServiceForVendorSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AMSServiceForVendorSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string AMS_CheckHrCertificated(string sEmpId, string sOperation)
        {
            return base.Channel.AMS_CheckHrCertificated(sEmpId, sOperation);
        }
        
        public System.Threading.Tasks.Task<string> AMS_CheckHrCertificatedAsync(string sEmpId, string sOperation)
        {
            return base.Channel.AMS_CheckHrCertificatedAsync(sEmpId, sOperation);
        }
        
        public AmkorServices1.ArrayOfXElement GetWaferListByRC(string sRC)
        {
            return base.Channel.GetWaferListByRC(sRC);
        }
        
        public System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> GetWaferListByRCAsync(string sRC)
        {
            return base.Channel.GetWaferListByRCAsync(sRC);
        }
        
        public AmkorServices1.ArrayOfXElement GetWaferListByMotherRC(string sRC)
        {
            return base.Channel.GetWaferListByMotherRC(sRC);
        }
        
        public System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> GetWaferListByMotherRCAsync(string sRC)
        {
            return base.Channel.GetWaferListByMotherRCAsync(sRC);
        }
        
        public string LinkCassateAndRC(string sCassette, string sRC)
        {
            return base.Channel.LinkCassateAndRC(sCassette, sRC);
        }
        
        public System.Threading.Tasks.Task<string> LinkCassateAndRCAsync(string sCassette, string sRC)
        {
            return base.Channel.LinkCassateAndRCAsync(sCassette, sRC);
        }
        
        public string DPS_AutoMoveInOut(string sRC, string sMC, string sEmpId, string sAction)
        {
            return base.Channel.DPS_AutoMoveInOut(sRC, sMC, sEmpId, sAction);
        }
        
        public System.Threading.Tasks.Task<string> DPS_AutoMoveInOutAsync(string sRC, string sMC, string sEmpId, string sAction)
        {
            return base.Channel.DPS_AutoMoveInOutAsync(sRC, sMC, sEmpId, sAction);
        }
        
        public string GetWTRecipe(string sRC)
        {
            return base.Channel.GetWTRecipe(sRC);
        }
        
        public System.Threading.Tasks.Task<string> GetWTRecipeAsync(string sRC)
        {
            return base.Channel.GetWTRecipeAsync(sRC);
        }
        
        public AmkorServices1.ArrayOfXElement GetATK_QMALotInfo(string sLot)
        {
            return base.Channel.GetATK_QMALotInfo(sLot);
        }
        
        public System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> GetATK_QMALotInfoAsync(string sLot)
        {
            return base.Channel.GetATK_QMALotInfoAsync(sLot);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        AmkorServices1.LotHold_API_ByAMSLotIdwithUserResponse AmkorServices1.AMSServiceForVendorSoap.LotHold_API_ByAMSLotIdwithUser(AmkorServices1.LotHold_API_ByAMSLotIdwithUserRequest request)
        {
            return base.Channel.LotHold_API_ByAMSLotIdwithUser(request);
        }
        
        public bool LotHold_API_ByAMSLotIdwithUser(string sAMSLotId, ref string sMsg, string sHoldComments, string sHoldReason, string sFromSYS, string sUserName)
        {
            AmkorServices1.LotHold_API_ByAMSLotIdwithUserRequest inValue = new AmkorServices1.LotHold_API_ByAMSLotIdwithUserRequest();
            inValue.sAMSLotId = sAMSLotId;
            inValue.sMsg = sMsg;
            inValue.sHoldComments = sHoldComments;
            inValue.sHoldReason = sHoldReason;
            inValue.sFromSYS = sFromSYS;
            inValue.sUserName = sUserName;
            AmkorServices1.LotHold_API_ByAMSLotIdwithUserResponse retVal = ((AmkorServices1.AMSServiceForVendorSoap)(this)).LotHold_API_ByAMSLotIdwithUser(inValue);
            sMsg = retVal.sMsg;
            return retVal.LotHold_API_ByAMSLotIdwithUserResult;
        }
        
        public System.Threading.Tasks.Task<AmkorServices1.LotHold_API_ByAMSLotIdwithUserResponse> LotHold_API_ByAMSLotIdwithUserAsync(AmkorServices1.LotHold_API_ByAMSLotIdwithUserRequest request)
        {
            return base.Channel.LotHold_API_ByAMSLotIdwithUserAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPResponse AmkorServices1.AMSServiceForVendorSoap.LotHold_API_ByAMSLotIdwithUser_DLP(AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPRequest request)
        {
            return base.Channel.LotHold_API_ByAMSLotIdwithUser_DLP(request);
        }
        
        public bool LotHold_API_ByAMSLotIdwithUser_DLP(string sAMSLotId, ref string sMsg, string sHoldComments, string sHoldReason, string sFromSYS, string sUserName)
        {
            AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPRequest inValue = new AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPRequest();
            inValue.sAMSLotId = sAMSLotId;
            inValue.sMsg = sMsg;
            inValue.sHoldComments = sHoldComments;
            inValue.sHoldReason = sHoldReason;
            inValue.sFromSYS = sFromSYS;
            inValue.sUserName = sUserName;
            AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPResponse retVal = ((AmkorServices1.AMSServiceForVendorSoap)(this)).LotHold_API_ByAMSLotIdwithUser_DLP(inValue);
            sMsg = retVal.sMsg;
            return retVal.LotHold_API_ByAMSLotIdwithUser_DLPResult;
        }
        
        public System.Threading.Tasks.Task<AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPResponse> LotHold_API_ByAMSLotIdwithUser_DLPAsync(AmkorServices1.LotHold_API_ByAMSLotIdwithUser_DLPRequest request)
        {
            return base.Channel.LotHold_API_ByAMSLotIdwithUser_DLPAsync(request);
        }
        
        public string AMS_UpdMRSStatus(string sReqNoList, string sStatus)
        {
            return base.Channel.AMS_UpdMRSStatus(sReqNoList, sStatus);
        }
        
        public System.Threading.Tasks.Task<string> AMS_UpdMRSStatusAsync(string sReqNoList, string sStatus)
        {
            return base.Channel.AMS_UpdMRSStatusAsync(sReqNoList, sStatus);
        }
        
        public AmkorServices1.ArrayOfXElement AMS_QueryMRSInfo(string sProdLine, string sFloor, string sStock, string sReqNo)
        {
            return base.Channel.AMS_QueryMRSInfo(sProdLine, sFloor, sStock, sReqNo);
        }
        
        public System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> AMS_QueryMRSInfoAsync(string sProdLine, string sFloor, string sStock, string sReqNo)
        {
            return base.Channel.AMS_QueryMRSInfoAsync(sProdLine, sFloor, sStock, sReqNo);
        }
        
        public AmkorServices1.ArrayOfXElement AMS_QueryStockSIDInfo(string sProdLine, string sFloor, string sStock, string sMaterialGroup, string sSID)
        {
            return base.Channel.AMS_QueryStockSIDInfo(sProdLine, sFloor, sStock, sMaterialGroup, sSID);
        }
        
        public System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> AMS_QueryStockSIDInfoAsync(string sProdLine, string sFloor, string sStock, string sMaterialGroup, string sSID)
        {
            return base.Channel.AMS_QueryStockSIDInfoAsync(sProdLine, sFloor, sStock, sMaterialGroup, sSID);
        }
        
        public object AMS_Stocktest(string action, string SidList, string sLotPrefix, string sFloor, string sEmpId)
        {
            return base.Channel.AMS_Stocktest(action, SidList, sLotPrefix, sFloor, sEmpId);
        }
        
        public System.Threading.Tasks.Task<object> AMS_StocktestAsync(string action, string SidList, string sLotPrefix, string sFloor, string sEmpId)
        {
            return base.Channel.AMS_StocktestAsync(action, SidList, sLotPrefix, sFloor, sEmpId);
        }
        
        public object AMS_StockIn(object[] aDatalist, string sEmpId, string sAction)
        {
            return base.Channel.AMS_StockIn(aDatalist, sEmpId, sAction);
        }
        
        public System.Threading.Tasks.Task<object> AMS_StockInAsync(object[] aDatalist, string sEmpId, string sAction)
        {
            return base.Channel.AMS_StockInAsync(aDatalist, sEmpId, sAction);
        }
        
        public object AMS_StockOut(object[] aDatalist, string sProdLine, string sFloor, string sEmpId, string sAction)
        {
            return base.Channel.AMS_StockOut(aDatalist, sProdLine, sFloor, sEmpId, sAction);
        }
        
        public System.Threading.Tasks.Task<object> AMS_StockOutAsync(object[] aDatalist, string sProdLine, string sFloor, string sEmpId, string sAction)
        {
            return base.Channel.AMS_StockOutAsync(aDatalist, sProdLine, sFloor, sEmpId, sAction);
        }
        
        public object AMS_UpdSIDStocktaking(string sProdLine, string sFloor, object[] aDatalist, string sEmpId)
        {
            return base.Channel.AMS_UpdSIDStocktaking(sProdLine, sFloor, aDatalist, sEmpId);
        }
        
        public System.Threading.Tasks.Task<object> AMS_UpdSIDStocktakingAsync(string sProdLine, string sFloor, object[] aDatalist, string sEmpId)
        {
            return base.Channel.AMS_UpdSIDStocktakingAsync(sProdLine, sFloor, aDatalist, sEmpId);
        }
        
        public AmkorServices1.ArrayOfXElement AMS_QuerySIDOrder(string sAction, string sOrderId, string sStatus, string sMC, string sFloor, string sLotprefix, string sSID, string sEPC)
        {
            return base.Channel.AMS_QuerySIDOrder(sAction, sOrderId, sStatus, sMC, sFloor, sLotprefix, sSID, sEPC);
        }
        
        public System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> AMS_QuerySIDOrderAsync(string sAction, string sOrderId, string sStatus, string sMC, string sFloor, string sLotprefix, string sSID, string sEPC)
        {
            return base.Channel.AMS_QuerySIDOrderAsync(sAction, sOrderId, sStatus, sMC, sFloor, sLotprefix, sSID, sEPC);
        }
        
        public string AMS_UpdSIDOrder(string sOrderID, string sStatus, string sMC, string sFloor, string sLot, string sEmpId, string sSID, string sMTGroup, string sQty, string sReason, string sVendorLot, string sEPC, string sExpDate, string sFunction)
        {
            return base.Channel.AMS_UpdSIDOrder(sOrderID, sStatus, sMC, sFloor, sLot, sEmpId, sSID, sMTGroup, sQty, sReason, sVendorLot, sEPC, sExpDate, sFunction);
        }
        
        public System.Threading.Tasks.Task<string> AMS_UpdSIDOrderAsync(string sOrderID, string sStatus, string sMC, string sFloor, string sLot, string sEmpId, string sSID, string sMTGroup, string sQty, string sReason, string sVendorLot, string sEPC, string sExpDate, string sFunction)
        {
            return base.Channel.AMS_UpdSIDOrderAsync(sOrderID, sStatus, sMC, sFloor, sLot, sEmpId, sSID, sMTGroup, sQty, sReason, sVendorLot, sEPC, sExpDate, sFunction);
        }
        
        public string AMS_isMaterialOP(string sOPID)
        {
            return base.Channel.AMS_isMaterialOP(sOPID);
        }
        
        public System.Threading.Tasks.Task<string> AMS_isMaterialOPAsync(string sOPID)
        {
            return base.Channel.AMS_isMaterialOPAsync(sOPID);
        }
        
        public AmkorServices1.ArrayOfXElement AMS_GetLotInfo(string sRC)
        {
            return base.Channel.AMS_GetLotInfo(sRC);
        }
        
        public System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> AMS_GetLotInfoAsync(string sRC)
        {
            return base.Channel.AMS_GetLotInfoAsync(sRC);
        }
        
        public string AMS_CheckOpCertificated(string sRC, string sEmpId)
        {
            return base.Channel.AMS_CheckOpCertificated(sRC, sEmpId);
        }
        
        public System.Threading.Tasks.Task<string> AMS_CheckOpCertificatedAsync(string sRC, string sEmpId)
        {
            return base.Channel.AMS_CheckOpCertificatedAsync(sRC, sEmpId);
        }
        
        public AmkorServices1.ArrayOfXElement QueryStockoutHis(string sSID, string sVendorLot)
        {
            return base.Channel.QueryStockoutHis(sSID, sVendorLot);
        }
        
        public System.Threading.Tasks.Task<AmkorServices1.ArrayOfXElement> QueryStockoutHisAsync(string sSID, string sVendorLot)
        {
            return base.Channel.QueryStockoutHisAsync(sSID, sVendorLot);
        }
        
        public string GetOperSIDByOper(string sRC, string sOpName, string sRemark)
        {
            return base.Channel.GetOperSIDByOper(sRC, sOpName, sRemark);
        }
        
        public System.Threading.Tasks.Task<string> GetOperSIDByOperAsync(string sRC, string sOpName, string sRemark)
        {
            return base.Channel.GetOperSIDByOperAsync(sRC, sOpName, sRemark);
        }
        
        public string AMS_ManualStockInReason()
        {
            return base.Channel.AMS_ManualStockInReason();
        }
        
        public System.Threading.Tasks.Task<string> AMS_ManualStockInReasonAsync()
        {
            return base.Channel.AMS_ManualStockInReasonAsync();
        }
        
        public string AMS_ManualStockOutReason()
        {
            return base.Channel.AMS_ManualStockOutReason();
        }
        
        public System.Threading.Tasks.Task<string> AMS_ManualStockOutReasonAsync()
        {
            return base.Channel.AMS_ManualStockOutReasonAsync();
        }
        
        public string AMS_StockOut1(string sRC, string sMC, string sSID, string sVendorLot, string sRemark, string sQty, string sFloor, string sEmpId)
        {
            return base.Channel.AMS_StockOut1(sRC, sMC, sSID, sVendorLot, sRemark, sQty, sFloor, sEmpId);
        }
        
        public System.Threading.Tasks.Task<string> AMS_StockOut1Async(string sRC, string sMC, string sSID, string sVendorLot, string sRemark, string sQty, string sFloor, string sEmpId)
        {
            return base.Channel.AMS_StockOut1Async(sRC, sMC, sSID, sVendorLot, sRemark, sQty, sFloor, sEmpId);
        }
        
        public string AMS_StockIn1(string sProdLine, string sFloor, string sStock, string sSID, string sVendorLot, string sQty, string sRemark, string sEmpId)
        {
            return base.Channel.AMS_StockIn1(sProdLine, sFloor, sStock, sSID, sVendorLot, sQty, sRemark, sEmpId);
        }
        
        public System.Threading.Tasks.Task<string> AMS_StockIn1Async(string sProdLine, string sFloor, string sStock, string sSID, string sVendorLot, string sQty, string sRemark, string sEmpId)
        {
            return base.Channel.AMS_StockIn1Async(sProdLine, sFloor, sStock, sSID, sVendorLot, sQty, sRemark, sEmpId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AMSServiceForVendorSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.AMSServiceForVendorSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AMSServiceForVendorSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://t1mesq17/AMSWebService/AMSServiceForVendor.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.AMSServiceForVendorSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://t1mesq17/AMSWebService/AMSServiceForVendor.asmx");
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            AMSServiceForVendorSoap,
            
            AMSServiceForVendorSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.2.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
